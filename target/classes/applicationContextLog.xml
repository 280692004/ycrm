<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
		 http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">		
	 
	<bean id="userOperationLogService" class="com.thesys.architecture.aop.useroperationlog.service.impl.UserOperationLogServiceImpl" />
	
	<!-- 配置切面 --> 
	<!-- proxy-target-class=如果为true则使用cglib为目标对象创建代理,否则会使用jdk的动态代理（使用jdk的动态代理必须实现某个接口） -->
	<!-- JDK动态代理：其代理对象必须是某个接口的实现，它是通过在运行期间创建一个接口的实现类来完成对目标对象的代理 -->
	<!-- CGLIB代理：实现原理类似于JDK动态代理，只是它在运行期间生成的代理对象是针对目标类扩展的子类 -->
	<!-- 如只针对Dao或service进行代理，也可以把 proxy-target-class="true"去掉-->	
	<aop:config proxy-target-class="true">

		<aop:aspect id="userOperationLogAspect" ref="userOperationLogService">
		<!-- 配置com.suntang.*.service.*.impl包下所有类或接口的所有方法--> 
  			<aop:pointcut id="businessService" expression="execution(* com.thesys..*Controller.*(..)) and !execution(* com.thesys..Base*Controller*.*(..)) and !execution(* com.thesys..*Controller.prepare*(..)) and !execution(* com.thesys..*ServiceImpl.*(..)) "/> 
  			<aop:around pointcut-ref="businessService" method="newUserOperationLog" /> 
  		</aop:aspect>		
	</aop:config>		 			 	

 </beans>